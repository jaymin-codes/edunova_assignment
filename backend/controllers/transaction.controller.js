import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/apiError.js";
import { ApiResponse } from "../utils/apiResponse.js";
import { Transaction } from "../models/transaction.model.js";
import { Book } from "../models/book.model.js";
import { User } from "../models/user.model.js";

//
//
const issueBook = asyncHandler(async (req, res) => {
  const { userName, bookName, issuedDate } = req.body;

  if (!userName || !bookName || !issuedDate) {
    throw new ApiError(400, "All fields are required!!");
  }

  const checkUserExists = await User.findOne({ userName });
  if (!checkUserExists) {
    throw new ApiError(404, "User not found");
  }

  const checkBookAvailable = await Book.findOne({
    name: bookName,
    status: true,
  });
  if (!checkBookAvailable) {
    throw new ApiError(404, "Book is unavailable or does not exist");
  }

  const newTransaction = await Transaction.create({
    userName,
    bookName,
    issuedDate,
    returnDate: "",
    rent: 0,
  });

  await Book.findOneAndUpdate({ name: bookName }, { $set: { status: false } });

  const checkTransaction = await Transaction.findById(newTransaction._id);
  if (!checkTransaction) {
    throw new ApiError(500, "Something went wrong while issuing book");
  }

  return res
    .status(201)
    .json(new ApiResponse(201, newTransaction, "Book issued successfully"));
});

//
//
const returnBook = asyncHandler(async (req, res) => {
  const { userName, bookName, returnDate } = req.body;

  if ([userName, bookName, returnDate].some((field) => !field?.trim())) {
    throw new ApiError(400, "All fields are required!!");
  }

  const validateUser = await User.findOne({ userName });
  if (!validateUser) {
    throw new ApiError(404, "User not found");
  }

  const findTransaction = await Transaction.findOne({
    userName,
    bookName,
    returnDate: "",
  });

  if (!findTransaction) {
    throw new ApiError(404, "Transaction not found or book already returned");
  }

  const issuedDateObj = new Date(findTransaction.issuedDate);
  const returnDateObj = new Date(returnDate);
  const timeDifference = returnDateObj - issuedDateObj;

  const numberOfDays = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));

  const book = await Book.findOne({ name: bookName });
  const totalRent = numberOfDays * book.rent;

  await Transaction.findOneAndUpdate(
    { _id: findTransaction._id },
    { $set: { returnDate, rent: totalRent } }
  );

  await Book.findOneAndUpdate({ name: bookName }, { $set: { status: true } });

  const confirmReturn = await Transaction.findById(findTransaction._id);
  if (!confirmReturn) {
    throw new ApiError(500, "Something went wrong while returning the book");
  }

  return res
    .status(200)
    .json(new ApiResponse(200, confirmReturn, "Book returned successfully"));
});

//
//
const issuedBookHistory = asyncHandler(async (req, res) => {
  const { bookName } = req.body;

  const people = await Transaction.find({ bookName });

  if (people.length === 0) {
    throw new ApiError(404, "No transactions or book does not exist");
  }

  const list = [];
  people.forEach((t) => {
    list.push(t.userName);
  });

  const latestUser = people[people.length - 1];
  console.log(latestUser);

  let bookStatus;
  if (!latestUser.returnDate) {
    bookStatus = `${latestUser.userName} has book`;
  } else {
    bookStatus = `Book is available`;
  }

  const finalRes = [bookStatus, list.length, list];

  return res
    .status(200)
    .json(
      new ApiResponse(200, finalRes, `${finalRes[1]} people issued ${bookName}`)
    );
});

//
//
const totalRentOfBook = asyncHandler(async (req, res) => {
  const { bookName } = req.body;

  const findTransactions = await Transaction.find({ bookName });

  if (findTransactions.length === 0) {
    throw new ApiError(404, "Not rent generated by this book.");
  }

  let rent = 0;
  findTransactions.forEach((t) => {
    rent += t.rent;
  });

  return res
    .status(200)
    .json(new ApiResponse(200, rent, `Total rent generated is ${rent}`));
});

//
//
const userIssuedBook = asyncHandler(async (req, res) => {
  const { userName } = req.body;

  const books = await Transaction.find({ userName });

  if (books.length === 0) {
    throw new ApiError(
      404,
      `No books issued to ${userName} or user not exists`
    );
  }

  const list = new Set();
  books.forEach((b) => {
    list.add(b.bookName);
  });

  const finalRes = Array.from(list);

  return res
    .status(200)
    .json(new ApiResponse(200, finalRes, `Books issued by ${userName}`));
});

//
//
const sortByDateRange = asyncHandler(async (req, res) => {
  //sorting based on issued date
  const { startDate, endDate } = req.body;

  if (!startDate || !endDate) {
    throw new ApiError(400, "Both startDate and endDate are required");
  }

  const start = new Date(startDate);
  const end = new Date(endDate);

  const findTransactions = await Transaction.find({
    issuedDate: {
      $gte: start,
      $lte: end,
    },
  });

  if (findTransactions.length === 0) {
    throw new ApiError(404, "No transactions found within this date range");
  }

  return res
    .status(200)
    .json(
      new ApiResponse(
        200,
        findTransactions,
        `${findTransactions.length} books issued in this date range`
      )
    );
});

export {
  issueBook,
  returnBook,
  issuedBookHistory,
  totalRentOfBook,
  userIssuedBook,
  sortByDateRange,
};
